Index: DataRepositoryYamlImplementation/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>DataRepository</artifactId>\n        <groupId>com.SK</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>DataRepositoryYamlImplementation</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.yaml</groupId>\n            <artifactId>snakeyaml</artifactId>\n            <version>1.21</version>\n        </dependency>\n    </dependencies>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/pom.xml	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ DataRepositoryYamlImplementation/pom.xml	(date 1603986107805)
@@ -2,14 +2,40 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.SK</groupId>
+    <artifactId>DataRepositoryYamlImplementation</artifactId>
+    <packaging>pom</packaging>
+    <version>1.0-SNAPSHOT</version>
+
+    <name>DataRepositoryYamlImplementation</name>
+    <description>Nikolina Vranes i Ilija Pavlovic</description>
+
     <parent>
         <artifactId>DataRepository</artifactId>
         <groupId>com.SK</groupId>
         <version>1.0-SNAPSHOT</version>
     </parent>
-    <modelVersion>4.0.0</modelVersion>
+
 
-    <artifactId>DataRepositoryYamlImplementation</artifactId>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>8</source>
+                    <target>8</target>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+    <properties>
+        <maven.compile.target>1.8</maven.compile.target>
+        <maven.compile.source>1.8</maven.compile.source>
+    </properties>
 
     <dependencies>
         <dependency>
@@ -17,6 +43,23 @@
             <artifactId>snakeyaml</artifactId>
             <version>1.21</version>
         </dependency>
+
+        <dependency>
+            <groupId>com.SK</groupId>
+            <artifactId>DataRepositorySpecification</artifactId>
+            <version>1.0-SNAPSHOT</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.6.2</version>
+            <scope>compile</scope>
+        </dependency>
+
+      
+
+
+
     </dependencies>
 
 </project>
\ No newline at end of file
Index: .idea/compiler.xml
===================================================================
--- .idea/compiler.xml	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ .idea/compiler.xml	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <annotationProcessing>
-      <profile name="Maven default annotation processors profile" enabled="true">
-        <sourceOutputDir name="target/generated-sources/annotations" />
-        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
-        <outputRelativeToContentRoot value="true" />
-        <module name="DataRepositoryYamlImplementation" />
-      </profile>
-    </annotationProcessing>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1603901006694)
+++ .idea/jarRepositories.xml	(date 1603901006694)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: DataRepositoryYamlImplementation/main/java/importexport/ImportExportYaml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/main/java/importexport/ImportExportYaml.java	(date 1603903679894)
+++ DataRepositoryYamlImplementation/main/java/importexport/ImportExportYaml.java	(date 1603903679894)
@@ -0,0 +1,72 @@
+package importexport;
+
+
+import model.Entity;
+import org.yaml.snakeyaml.TypeDescription;
+import org.yaml.snakeyaml.Yaml;
+import utils.FileUtils;
+import org.yaml.snakeyaml.constructor.Constructor;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+
+public class ImportExportYaml implements IImportExport {
+
+    private static ImportExportYaml instance = null;
+
+    public static IImportExport getInstance(){           // TODO da li da bude instanca interfejsa
+        if (instance == null)
+            instance = new ImportExportYaml();
+        return instance;
+    }
+
+    @Override
+    public String importFile(String sourcePath) throws IOException {
+        return null;
+    }
+
+    @Override
+    public void exportFile(String destinationPath, String data) throws IOException {
+
+    }
+
+//    @Override
+//    public List<Entity> importFileEntities(String sourcePath) throws IOException {
+//
+//
+//        Constructor constructor = new Constructor();
+//        constructor.addTypeDescription(new TypeDescription(Entity.class));
+//
+//        Yaml yaml = new Yaml(constructor);
+//
+//// Load categories and products
+//        try (InputStream in = new FileInputStream(new File(sourcePath))) {
+//            List<Entity> entities = new ArrayList<Entity>();
+//
+//            Iterable<Object> allYamlObjects = yaml.loadAll(input);
+//
+//            for (Iterator<?> yamlObjectIterator = allYamlObjects.iterator(); yamlObjectIterator.hasNext(); ) {
+//                List<?> yamlObjects = (List<?>) yamlObjectIterator.next();
+//                for (Object yamlObject : yamlObjects) {
+//                    if (yamlObject instanceof Entity) {
+//                        entities.add((Entity) yamlObject);
+//                    }
+//                }
+//            }
+//
+//
+//            return entities;
+//        }
+//
+//    }
+
+
+}
Index: DataRepositoryYamlImplementation/main/java/service/ServiceValidatorYaml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/main/java/service/ServiceValidatorYaml.java	(date 1603901006714)
+++ DataRepositoryYamlImplementation/main/java/service/ServiceValidatorYaml.java	(date 1603901006714)
@@ -0,0 +1,11 @@
+package service;
+
+
+public class ServiceValidatorYaml implements IServiceValidator {
+
+
+    @Override
+    public boolean validate(String entity, String objectMetaSchema) throws Exception {
+        return false;
+    }
+}
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"SpellCheckingInspection\" enabled=\"true\" level=\"TYPO\" enabled_by_default=\"true\">\n      <option name=\"processCode\" value=\"true\" />\n      <option name=\"processLiterals\" value=\"false\" />\n      <option name=\"processComments\" value=\"false\" />\n    </inspection_tool>\n  </profile>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1603907226568)
@@ -1,6 +1,11 @@
 <component name="InspectionProjectProfileManager">
   <profile version="1.0">
     <option name="myName" value="Project Default" />
+    <inspection_tool class="DuplicatedCode" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <Languages>
+        <language minSize="59" name="Java" />
+      </Languages>
+    </inspection_tool>
     <inspection_tool class="SpellCheckingInspection" enabled="true" level="TYPO" enabled_by_default="true">
       <option name="processCode" value="true" />
       <option name="processLiterals" value="false" />
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.SK</groupId>\n    <artifactId>DataRepository</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>8</source>\n                    <target>8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <modules>\n        <module>DataRepositorySpecification</module>\n        <module>DataRepositoryJsonImplementation</module>\n        <module>DataRepositoryYamlImplementation</module>\n    </modules>\n    <name>DataRepository</name>\n    <description>Nikolina Vranes i Ilija Pavlovic</description>\n\n    <properties>\n        <maven.compile.target>1.8</maven.compile.target>\n        <maven.compile.source>1.8</maven.compile.source>\n    </properties>\n\n\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ pom.xml	(date 1603986328363)
@@ -32,6 +32,13 @@
         <maven.compile.target>1.8</maven.compile.target>
         <maven.compile.source>1.8</maven.compile.source>
     </properties>
+    <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml -->
+    <dependency>
+        <groupId>com.fasterxml.jackson.dataformat</groupId>
+        <artifactId>jackson-dataformat-yaml</artifactId>
+        <version>2.11.2</version>
+    </dependency>
+
 
 
 
Index: DataRepositoryYamlImplementation/main/java/service/StorageYaml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/main/java/service/StorageYaml.java	(date 1603910000316)
+++ DataRepositoryYamlImplementation/main/java/service/StorageYaml.java	(date 1603910000316)
@@ -0,0 +1,164 @@
+package service;
+import importexport.ImportExportYaml;
+import model.Entity;
+import org.yaml.snakeyaml.TypeDescription;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.Constructor;
+
+import java.io.*;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class StorageYaml implements IStorage{
+Yaml yaml = new Yaml();
+
+    @Override
+    public List<Entity> read(String path) {
+
+        Constructor constructor = new Constructor();
+        constructor.addTypeDescription(new TypeDescription(Entity.class));
+        List<Entity> entities = new ArrayList<Entity>();
+
+        Yaml yaml = new Yaml(constructor);
+
+        try (InputStream in = new FileInputStream(new File(path))) {
+
+            Iterable<Object> allYamlObjects = yaml.loadAll(in);
+
+            for (Iterator<?> yamlObjectIterator = allYamlObjects.iterator(); yamlObjectIterator.hasNext(); ) {
+                List<?> yamlObjects = (List<?>) yamlObjectIterator.next();
+                for (Object yamlObject : yamlObjects) {
+                    if (yamlObject instanceof Entity) {
+                        entities.add((Entity) yamlObject);
+                    }
+                }
+            }
+
+        } catch (FileNotFoundException e) {
+            return null;
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return entities;
+    }
+ja sam najpametniji nikolinin omiljeni decko i najlepsi!!
+    @Override
+    public List<Entity> readAll(String path) {
+        ArrayList<Entity> entities = new ArrayList<Entity>();
+        int fileNo = Database.getInstance().getNumberOfEntities() / Database.getInstance().getMaxEntities();
+        String pathcopy = path;
+        pathcopy += Integer.toString(fileNo);
+        List<Entity> ent = null;
+
+        while((ent = read(pathcopy)) != null){
+            for(Entity e : ent)
+                entities.add(e);
+            pathcopy =  path;
+            pathcopy += Integer.toString(fileNo+1);
+        }
+            return entities;
+    }
+
+    @Override
+    public void add(String path, Entity entity){
+        List<Entity> entities  = read(path);
+        entities.add(entity);
+        String yamlString = "";
+
+        for(Entity ent : entities){
+           yamlString = yamlString.concat(yaml.dump(ent));
+        }
+       try{ ImportExportYaml.getInstance().exportFile(path,yamlString);}
+       catch (IOException e) { e.printStackTrace();}
+
+    }
+
+    @Override
+    public void add(String path, String id, String name, Map<String, String> attributes, Map<String, Entity> nestedEntities) {
+
+    }
+
+    @Override
+    public void delete(String path, Entity entity) {
+        List<Entity> entities = read(path);
+        entities.remove(entity);
+
+        try {
+            ImportExportYaml.getInstance().exportFile(path,yaml.dump(entities));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    @Override
+    public void delete(String path, String id) {
+        List <Entity> entities = read(path);
+        entities.remove(entity);
+
+
+
+        ImportExportYaml.getInstance().exportFile(path, yaml.dump(entities));
+
+
+    }
+
+    @Override
+    public Entity findById(String id) {
+        List<Entity> entities = read(path);
+        Entity toDelete = null;
+
+        for(Entity ent : entities){
+            if(ent.getId().equals(id))
+            {
+                return ent;
+                break;
+            }
+        }
+        System.out.println("no byid");
+        return null;
+//
+//        String yamlString = "";
+//
+//        for(Entity ent : entities){
+//           yamlString = yamlString.concat(yaml.dump(ent));
+//        }
+//        try{ ImportExportYaml.getInstance().exportFile(path,yamlString);}  // ovo u odvojenu funkciju
+//        catch (IOException e) { e.printStackTrace();}
+    }
+
+    @Override
+    public List<Entity> findByType(String type) {
+        List<Entity> entities = read(path);
+        List <Entity> findTypes = null;
+        Entity toDelete = null;
+
+        for(Entity ent : entities){
+            if(ent.getType().equals(type))
+            {
+                findTypes.add(ent);
+            }
+        }
+        return entities;
+//
+//        String yamlString = "";
+//
+//        for(Entity ent : entities){
+//           yamlString = yamlString.concat(yaml.dump(ent));
+//        }
+//        try{ ImportExportYaml.getInstance().exportFile(path,yamlString);}  // ovo u odvojenu funkciju
+//        catch (IOException e) { e.printStackTrace();}
+    }
+
+    @Override
+    public List<Entity> findByAttribute(String name) {
+        return null;
+    }
+
+    @Override
+    public List<Entity> findByValue(String operator, String name, String value) {
+        return null;
+    }
+}
Index: DataRepositorySpecification/src/main/java/model/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Entity {\n\n    private String type;\n    private String id;\n    private Map<String, String> attributes;\n    private Map<String, Entity> nestedEntities;\n\n    public Entity() {\n        this.attributes = new HashMap<>();\n        this.nestedEntities = new HashMap<>();\n        //TODO autoincrement id\n        this.id = \"\";\n        this.type = \"\";\n    }\n\n    public Entity(String id , String name) {\n        this.attributes = new HashMap<>();\n        this.nestedEntities = new HashMap<>();\n        this.id = id;\n        this.type = name;\n    }\n\n    public String getId() { return id; }\n\n    public void setId(String id) { this.id = id; }\n\n    public void addAttribute(String key, String value) { attributes.put(key, value); }\n\n    public void replaceAttribute(String key, String value) { attributes.replace(key, value); }\n\n    public Map<String, String> getAttributes() { return attributes; }\n\n    public void setAttributes(Map<String, String> attributes) { this.attributes = attributes; }\n\n    public String getType() { return type; }\n\n    public void setType(String name) { this.type = name; }\n\n    public Map<String, Entity> getNestedEntities() { return nestedEntities; }\n\n    public void setNestedEntities(Map<String, Entity> nestedEntities) { this.nestedEntities = nestedEntities; }\n\n    public void addNestedEntity (String key, Entity value) { nestedEntities.put(key, value); }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositorySpecification/src/main/java/model/Entity.java	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ DataRepositorySpecification/src/main/java/model/Entity.java	(date 1603901006724)
@@ -46,4 +46,14 @@
     public void setNestedEntities(Map<String, Entity> nestedEntities) { this.nestedEntities = nestedEntities; }
 
     public void addNestedEntity (String key, Entity value) { nestedEntities.put(key, value); }
+
+    @Override
+    public String toString() {
+        return "Entity{" +
+                "type='" + type + '\'' +
+                ", id='" + id + '\'' +
+                ", attributes=" + attributes +
+                ", nestedEntities=" + nestedEntities +
+                '}';
+    }
 }
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1603901006700)
+++ .gitignore	(date 1603901006700)
@@ -0,0 +1,1 @@
+/target/
Index: DataRepositoryJsonImplementation/src/main/java/service/ObjectConverterJson.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.google.gson.Gson;\n\npublic class ObjectConverterJson implements IObjectConverter {\n\n    private static ObjectConverterJson instance;\n    private Gson gson = new Gson();\n\n    public synchronized static ObjectConverterJson getInstance() {\n        if (instance == null)\n            instance = new ObjectConverterJson();\n        return instance;\n    }\n\n    @Override\n    public String objectToFormat(Object object) throws Exception {\n        String jsonString = gson.toJson(object);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n        JsonNode tree = objectMapper.readTree(jsonString);\n        String formattedJson = objectMapper.writeValueAsString(tree);\n\n        return formattedJson;\n    }\n\n    @Override\n    public Object formatToObject(String json, Class<?> classOf) throws Exception {\n        return gson.fromJson(json, classOf);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryJsonImplementation/src/main/java/service/ObjectConverterJson.java	(revision 726e361a41bad20f8faac610ebf248017ccd3ed7)
+++ DataRepositoryJsonImplementation/src/main/java/service/ObjectConverterJson.java	(date 1603901006727)
@@ -32,5 +32,4 @@
     public Object formatToObject(String json, Class<?> classOf) throws Exception {
         return gson.fromJson(json, classOf);
     }
-
 }
Index: DataRepositoryYamlImplementation/main/java/utils/YamlValidationUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/main/java/utils/YamlValidationUtils.java	(date 1603901006710)
+++ DataRepositoryYamlImplementation/main/java/utils/YamlValidationUtils.java	(date 1603901006710)
@@ -0,0 +1,9 @@
+package utils;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+
+public class YamlValidationUtils {
+
+}
\ No newline at end of file
Index: DataRepositoryYamlImplementation/main/java/service/ObjectConverterYaml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/main/java/service/ObjectConverterYaml.java	(date 1603901006706)
+++ DataRepositoryYamlImplementation/main/java/service/ObjectConverterYaml.java	(date 1603901006706)
@@ -0,0 +1,51 @@
+package service;
+
+
+import com.google.gson.Gson;
+import model.Entity;
+import org.yaml.snakeyaml.TypeDescription;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.Constructor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ObjectConverterYaml implements IObjectConverter {
+
+    private static ObjectConverterYaml instance;
+    Yaml yaml = new Yaml();
+
+    public static ObjectConverterYaml getInstance(){
+        if (instance == null)
+            instance = new ObjectConverterYaml();
+        return instance;
+    }
+
+    @Override
+    public String objectToFormat(Object object) throws Exception {
+        return yaml.dump(object);
+    }
+
+    @Override
+    public Object formatToObject(String entity, Class<?> classOf) throws Exception {
+        return  yaml.loadAs(entity, classOf);
+    }
+}
+
+/*
+    @Override
+    public String objectToFormat(Object object) throws Exception {
+        String jsonString = gson.toJson(object);
+
+        ObjectMapper objectMapper = new ObjectMapper();
+        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);
+        JsonNode tree = objectMapper.readTree(jsonString);
+        String formattedJson = objectMapper.writeValueAsString(tree);
+
+        return formattedJson;
+    }
+
+    @Override
+    public Object formatToObject(String json, Class<?> classOf) throws Exception {
+        return gson.fromJson(json, classOf);
+    }*/
\ No newline at end of file
