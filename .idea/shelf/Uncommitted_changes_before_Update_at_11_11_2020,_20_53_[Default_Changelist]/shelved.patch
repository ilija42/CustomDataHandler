Index: DataHandlerTester/src/main/java/actions/FilterButtonAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package actions;\n\nimport java.awt.Component;\nimport java.awt.FlowLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.JViewport;\nimport javax.swing.SpringLayout;\nimport javax.swing.SwingUtilities;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\n\nimport Exceptions.IdentifierException;\nimport model.Entity;\nimport model.Database;\nimport start.AppCore;\nimport start.Main;\nimport view.frame.MainFrame;\n\npublic class FilterButtonAction implements ActionListener{\n\n\t@Override\n\tpublic void actionPerformed(ActionEvent e) \n\t{\n\t\tJPanel mainPanel = new JPanel(new GridBagLayout());\n\n\t\tJLabel lblId = new JLabel(\"ID:\");\n\t\tJLabel lblType = new JLabel(\"Type:\");\n\t\tJLabel lblAttribute = new JLabel(\"Attribute:\");\n\n\n\t\tJPanel p = new JPanel(new FlowLayout());\n\t\tGridBagConstraints c = new GridBagConstraints();\n\t\tJTextField jfId = new JTextField(5);\n\t\tJTextField jfType = new JTextField(5);\n\t\tJTextField jfAttribute = new JTextField(5);\n\t\tJTextField jfNested = new JTextField(5);\n\t\tjfId.getDocument().addDocumentListener(new DocumentListener() {\n\n\t\t\t@Override\n\t\t\tpublic void insertUpdate(DocumentEvent e) {\n\t\t\t\tif(jfId.getText().equals(\"\")){\n\t\t\t\t\tjfType.setEnabled(true);\n\t\t\t\t\tjfType.setText(\"\");\n\t\t\t\t\tjfAttribute.setEnabled(true);\n\t\t\t\t\tjfAttribute.setText(\"\");\n\t\t\t\t}else{\n\t\t\t\t\tjfType.setEnabled(false);\n\t\t\t\t\tjfAttribute.setEnabled(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void removeUpdate(DocumentEvent e) {\n\t\t\t\tif(jfId.getText().equals(\"\")){\n\t\t\t\t\tjfType.setEnabled(true);\n\t\t\t\t\tjfType.setText(\"\");\n\t\t\t\t\tjfAttribute.setEnabled(true);\n\t\t\t\t\tjfAttribute.setText(\"\");\n\t\t\t\t}else{\n\t\t\t\t\tjfType.setEnabled(false);\n\t\t\t\t\tjfAttribute.setEnabled(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void changedUpdate(DocumentEvent e) {\n\t\t\t}\n\t\t});\n\n\t\tp.add(lblId);\n\t\tp.add(jfId);\n\t\tp.add(lblType);\n\t\tp.add(jfType);\n\t\tp.add(lblAttribute);\n\t\tp.add(jfAttribute);\n\t\tp.add(new JLabel(\"Nested:\"));\n\t\tp.add(jfNested);\n\n\t\tmainPanel.add(p);\n\n\t\tif( JOptionPane.showConfirmDialog(null,mainPanel,\"Fill this form to delete\",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)\n\t\t{\n\t\t\tString idToFilter = ((JTextField)(p.getComponent(1))).getText();\n\t\t\tString typeToFilter = ((JTextField)(p.getComponent(3))).getText();\n\t\t\tMap <String,String> attributesMap = new HashMap <>();\n\t\t\tString attributes = ((JTextField) (p.getComponent(5))).getText();\n\t\t\tString[] res = attributes.split(\"[,]\", 0);\n\n\t\t\tif (res.length > 0 && !res[0].equals(\"\")) {\n\t\t\t\tint k = 0;\n\t\t\t\tfor (String myStr : res) {\n\t\t\t\t\tString[] kv = res[k].split(\"[.]\", 0);\n\t\t\t\t\tif (kv[1].contains(\"*\")) attributesMap.put(kv[0], \" \");\n\t\t\t\t\telse attributesMap.put(kv[0], kv[1]);\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tList <Entity> toFilter  = new ArrayList <>();\n\t\t\tif(jfId.getText().equals(\"\") && jfAttribute.getText().equals(\"\") && jfType.getText().equals(\"\") && jfAttribute.getText().equals(\"\") && jfNested.getText().equals(\"\")){\n\t\t\t\tMainFrame.getInstance().setJt(MainFrame.getInstance().getAppCore().loadTable(Database.getInstance().getEntities()));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!jfId.getText().equals(\"\")){\n\t\t\t\tEntity byident = MainFrame.getInstance().getAppCore().getCrawler().findById(idToFilter);\n\t\t\t\tif(byident != null)\n\t\t\t\t\ttoFilter.add(byident);\n\t\t\t}else{\n\t\t\t\tint typeFlag,attrFlag,nestedFlag;\n\t\t\t\ttypeFlag = 0;\n\t\t\t\tattrFlag = 0;\n\t\t\t\tnestedFlag = 0;\n\n\t\t\t\tif(!jfType.getText().equals(\"\")) typeFlag = 1;\n\t\t\t\tif(!jfAttribute.getText().equals(\"\")) attrFlag = 1;\n\t\t\t\tif(!jfNested.getText().equals(\"\")) nestedFlag = 1;\n\n\t\t\t\tif(typeFlag == 1 && attrFlag == 1 && nestedFlag == 1){\n\n\n\t\t\t\t\ttoFilter = MainFrame.getInstance().getAppCore().getCrawler().findByType(typeToFilter);\n\t\t\t\t\ttoFilter = checkAttribute(attributesMap,toFilter);\n\t\t\t\t\ttoFilter = checkValue(attributesMap,toFilter);\n\t\t\t\t\ttoFilter = checkNested(jfNested.getText(), toFilter);\n\t\t\t\t}\n\t\t\t\telse if(typeFlag == 0 && attrFlag == 1  && nestedFlag == 1){\n\n\n\t\t\t\t\ttoFilter = Database.getInstance().getEntities();\n\t\t\t\t\ttoFilter = checkAttribute(attributesMap,toFilter);\n\t\t\t\t\ttoFilter = checkValue(attributesMap,toFilter);\n\t\t\t\t\ttoFilter = checkNested(jfNested.getText(), toFilter);\n\t\t\t\t}\n\t\t\t\telse if(typeFlag == 1 && attrFlag == 0 && nestedFlag == 1){\n\t\t\t\t\ttoFilter = MainFrame.getInstance().getAppCore().getCrawler().findByType(typeToFilter);\n\t\t\t\t\ttoFilter = checkNested(jfNested.getText(), toFilter);\n\n\t\t\t\t}\n\t\t\t\telse if(typeFlag == 0 && attrFlag == 0 && nestedFlag == 1){\n\t\t\t\t\ttoFilter = checkNested(jfNested.getText(), Database.getInstance().getEntities());\n\t\t\t\t}\n\t\t\t\telse if(typeFlag == 0 && attrFlag == 0 && nestedFlag == 0){\n\t\t\t\t\tJOptionPane.showMessageDialog(MainFrame.getInstance(),\"Nista nije odabrano za brisanje\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!toFilter.isEmpty() )\n\t\t\t\tMainFrame.getInstance().setJt(MainFrame.getInstance().getAppCore().loadTable(toFilter));\n\t\t}\n\n\n\t}\n\tpublic List<Entity> checkNested(String nested, List<Entity> toFilter){\n\t\tString[] res = nested.split(\"[,]\", 0);\n\n\t\tif (res.length > 0 && !res[0].equals(\"\")) {\n\t\t\tint k = 0;\n\t\t\tfor (String myStr : res) {\n\t\t\t\tString[] kv = res[k].split(\"[.]\", 0);\n\t\t\t\tString parentKey = kv[0];\n\t\t\t\tString childKey = kv[1];\n\t\t\t\tString childValue = kv[2];\n\t\t\t\tList<Entity> ToFilternew = new ArrayList <>();\n\t\t\t\tfor(Entity entity: toFilter){\n\t\t\t\t\tif(entity.getNestedEntities().get(parentKey) != null){\n\t\t\t\t\t\tif(entity.getNestedEntities().get(parentKey).getAttributes().get(childKey) != null){\n\t\t\t\t\t\t\tif(entity.getNestedEntities().get(parentKey).getAttributes().get(childKey).equals(childValue) ){\n\t\t\t\t\t\t\t\tToFilternew.add(entity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttoFilter = ToFilternew;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\treturn toFilter;\n\t}\n\n\tpublic List<Entity> checkAttribute(Map<String, String> attributesMap, List<Entity> toFilter){\n\t\tList<String> keys = new ArrayList <>();\n\t\tfor(Map.Entry<String,String> pair : attributesMap.entrySet()){\n\t\t\tkeys.add(pair.getKey());\n\t\t}\n\t\ttoFilter = MainFrame.getInstance().getAppCore().getCrawler().findByAttribute(toFilter, keys);\n\t\treturn toFilter;\n\t}\n\n\tpublic List<Entity> checkValue(Map<String, String> attributesMap, List<Entity> toFilter){\n\t\tMap<String,String> valMap = new HashMap <String, String>();\n\t\tfor(Map.Entry<String,String> pair : attributesMap.entrySet()){\n\t\t\tif(!pair.getValue().equals(\"\")){\n\t\t\t\tvalMap.put(pair.getKey(),pair.getValue());\n\t\t\t}\n\t\t}\n\t\ttoFilter = MainFrame.getInstance().getAppCore().getCrawler().findByValue(toFilter, valMap);\n\t\treturn toFilter;\n\t}\n}\n\t\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataHandlerTester/src/main/java/actions/FilterButtonAction.java	(revision 5a6753fb1a98d9cb521c85f47b345ed2774217c2)
+++ DataHandlerTester/src/main/java/actions/FilterButtonAction.java	(date 1605033480570)
@@ -138,7 +138,6 @@
 
 				if(typeFlag == 1 && attrFlag == 1 && nestedFlag == 1){
 
-
 					toFilter = MainFrame.getInstance().getAppCore().getCrawler().findByType(typeToFilter);
 					toFilter = checkAttribute(attributesMap,toFilter);
 					toFilter = checkValue(attributesMap,toFilter);
@@ -146,7 +145,6 @@
 				}
 				else if(typeFlag == 0 && attrFlag == 1  && nestedFlag == 1){
 
-
 					toFilter = Database.getInstance().getEntities();
 					toFilter = checkAttribute(attributesMap,toFilter);
 					toFilter = checkValue(attributesMap,toFilter);
Index: DataHandlerTester/src/main/java/start/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package start;\r\n\r\nimport view.frame.*;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) throws ClassNotFoundException {\r\n\t\tClass.forName(\"core.CustomRegistrator\");\r\n\r\n\t\tMainFrame mainFrame = MainFrame.getInstance();\r\n\t\t//mainFrame.getAppCore().readDataFromTable(\"NASTAVNI_PREDMETI\"); //ovo treba pozvati pri odaberu tabele za prikaz}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataHandlerTester/src/main/java/start/Main.java	(revision 5a6753fb1a98d9cb521c85f47b345ed2774217c2)
+++ DataHandlerTester/src/main/java/start/Main.java	(date 1605106771283)
@@ -5,7 +5,7 @@
 public class Main {
 
 	public static void main(String[] args) throws ClassNotFoundException {
-		Class.forName("core.CustomRegistrator");
+			Class.forName("core.CustomRegistrator");
 
 		MainFrame mainFrame = MainFrame.getInstance();
 		//mainFrame.getAppCore().readDataFromTable("NASTAVNI_PREDMETI"); //ovo treba pozvati pri odaberu tabele za prikaz}
Index: DataRepositoryYamlImplementation/src/main/java/service/StorageYaml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\nimport Exceptions.IdentifierException;\nimport importexport.IImportExport;\nimport importexport.ImportExportYaml;\nimport model.Database;\nimport model.Entity;\nimport org.yaml.snakeyaml.TypeDescription;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\n\nimport javax.xml.crypto.Data;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\npublic class StorageYaml extends AbstractStorage{\n    Yaml yaml = new Yaml();\n    private static StorageYaml instance = null;\n\n    public static StorageYaml getInstance(){           // TODO da li da bude instanca interfejsa\n        if (instance == null)\n            instance = new StorageYaml();\n        return instance;\n    }\n\n    @Override\n    public List<Entity> read(String path) {\n        List<Entity> entities = new ArrayList<>();\n\n        IImportExport importExport = ImportExportYaml.getInstance();\n        entities = importExport.importEntities(path);\n        for(Entity e : entities)\n            Database.getInstance().addEntity(e);// ove dve linije dodate\n\n        return entities;\n    }\n\n    @Override\n    public void add(String path, Entity entity) throws IdentifierException {\n        if (!OrderProvider.getInstance().isAvailableID(entity.getId())){\n            throw new IdentifierException(\"An entity with id: \" + entity.getId() + \" already exists\");\n        }\n\n        int fileNo = OrderProvider.getInstance().availableFile();\n        path += Integer.toString(fileNo);\n\n        IImportExport importExport = ImportExportYaml.getInstance();\n        List<Entity> entities = null;\n\n        entities = importExport.importEntities(path);\n        entities.add(entity);\n        importExport.exportEntities(path, entities);\n\n        database.addEntity(entity);\n        if (!database.getFiles().containsKey(fileNo))\n            database.getFiles().put(fileNo, new ArrayList<Entity>());\n        database.getFiles().get(fileNo).add(entity);\n    }\n\n    @Override\n    public void delete(String path, Entity entity) throws IdentifierException {\n        Integer fileNo = OrderProvider.getInstance().locateInFile(entity);\n        if(fileNo == null)\n            throw new IdentifierException(\"The entity for deletion doesn't exist\");\n        String filename =  Integer.toString(fileNo);\n        String filePath = path.concat(filename);\n        String absolutePath = filePath;\n        File file = new File(absolutePath);\n        List<Entity> entities;\n        Entity toRemove = null;\n        entities = ImportExportYaml.getInstance().importEntities(filePath);\n        Database.getInstance().getEntities().remove(entity);\n\n        for(Entity i : entities){\n            if(i.getId().equals(entity.getId())) {\n                toRemove = i;\n                break;\n            }\n        }\n        entities.remove(toRemove);\n        ImportExportYaml.getInstance().exportEntities(filePath,entities);\n    }\n\n    @Override\n    public void refresh(Entity ent, String path) throws IdentifierException {\n        if (OrderProvider.getInstance().isAvailableID(ent.getId())){\n            throw new IdentifierException(\"An entity with id: \" + ent.getId() + \" doesnt exists\");}\n        Entity toEdit = Crawler.getInstance().findById(ent.getId());\n\n        List <Entity> entities = Database.getInstance().getFiles().get(\n                OrderProvider.getInstance().locateInFile(toEdit)\n        );\n        Database.getInstance().getEntities().remove(toEdit);\n        entities.remove(toEdit);\n        if(!ent.getType().equals(\"\"))\n            toEdit.setType(ent.getType());\n        if(!ent.getNestedEntities().isEmpty())\n          toEdit.setNestedEntities(ent.getNestedEntities());\n        if(!ent.getAttributes().isEmpty())\n            toEdit.setAttributes(ent.getAttributes());\n        entities.add(toEdit);\n        Database.getInstance().getEntities().add(toEdit);\n\n        ImportExportYaml.getInstance().exportEntities(path, entities);\n\n    }\n\n    @Override\n    public void addnested(String path, Entity toAdd, String parentId, String key) throws IdentifierException {\n        if (OrderProvider.getInstance().isAvailableID(parentId)){\n            throw new IdentifierException(\"An entity with id: \" + parentId + \" doesnt exists\");}\n\n        List <Entity> entities = Database.getInstance().getFiles().get(\n                OrderProvider.getInstance().locateInFile(Crawler.getInstance().findById(parentId))\n        );\n        Entity et = Crawler.getInstance().findById(parentId);\n        Database.getInstance().getEntities().remove(et);\n        entities.remove(et);\n        et.getNestedEntities().put(key,toAdd);\n        entities.add(et);\n        Database.getInstance().getEntities().add(et);\n\n        ImportExportYaml.getInstance().exportEntities(path, entities);\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryYamlImplementation/src/main/java/service/StorageYaml.java	(revision 5a6753fb1a98d9cb521c85f47b345ed2774217c2)
+++ DataRepositoryYamlImplementation/src/main/java/service/StorageYaml.java	(date 1605106651038)
@@ -80,6 +80,9 @@
             }
         }
         entities.remove(toRemove);
+        System.out.println(filePath +"  fp");
+        System.out.println(path +"  path");
+
         ImportExportYaml.getInstance().exportEntities(filePath,entities);
     }
 
Index: DataRepositoryCustomImplementation/src/main/java/service/StorageCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\n\nimport Exceptions.IdentifierException;\nimport importexport.IImportExport;\nimport importexport.ImportExportCustom;\nimport model.Database;\nimport model.Entity;\n\nimport javax.xml.crypto.Data;\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class StorageCustom extends AbstractStorage{\n\n\n    private static StorageCustom instance = null;\n    private Database database = Database.getInstance();\n\n    public static AbstractStorage getInstance(){\n        if (instance == null)\n            instance = new StorageCustom();\n        return instance;\n    }\n\n    @Override\n    public List<Entity> read(String path) {\n        List<Entity> entities = new ArrayList<>();\n        IImportExport importExport = ImportExportCustom.getInstance();\n        entities = importExport.importEntities(path);\n        for(Entity e : entities)\n            Database.getInstance().addEntity(e);\n        return entities;\n    }\n\n    @Override\n    public void add (String path, Entity entity) throws IdentifierException {\n        if (!OrderProvider.getInstance().isAvailableID(entity.getId())){\n            throw new IdentifierException(\"An entity with id: \" + entity.getId() + \" already exists\");\n        }\n        int fileNo = OrderProvider.getInstance().availableFile();\n        if (!database.getFiles().containsKey(fileNo))\n            database.getFiles().put(fileNo, new ArrayList<Entity>());\n        List<Entity> entities = Database.getInstance().getFiles().get(fileNo);\n        entities.add(entity);\n        path += Integer.toString(fileNo);\n        IImportExport importExport = ImportExportCustom.getInstance();\n        importExport.exportEntities(path, entities);\n        database.addEntity(entity);\n    }\n\n    @Override\n    public void delete(String path, Entity entity) throws IdentifierException {\n        Integer fileNo = OrderProvider.getInstance().locateInFile(entity);\n        if(fileNo == null)\n            throw new IdentifierException(\"The entity for deletion doesn't exist\");\n        database.getFiles().get(fileNo).remove(entity);\n        IImportExport importExport = ImportExportCustom.getInstance();\n        importExport.exportEntities(path, database.getFiles().get(fileNo));\n        database.getEntities().remove(entity);\n    }\n\n    @Override\n    public void refresh(Entity ent, String path) throws IdentifierException {\n        if (OrderProvider.getInstance().isAvailableID(ent.getId())){\n            throw new IdentifierException(\"An entity with id: \" + ent.getId() + \" doesnt exists\");}\n        Entity toEdit = Crawler.getInstance().findById(ent.getId());\n\n        List <Entity> entities = Database.getInstance().getFiles().get(\n                OrderProvider.getInstance().locateInFile(toEdit)\n        );\n        Database.getInstance().getEntities().remove(toEdit);\n        entities.remove(toEdit);\n        if(!ent.getType().equals(\"\"))\n            toEdit.setType(ent.getType());\n        if(!ent.getNestedEntities().isEmpty())\n            toEdit.setNestedEntities(ent.getNestedEntities());\n        if(!ent.getAttributes().isEmpty())\n            toEdit.setAttributes(ent.getAttributes());\n        entities.add(toEdit);\n        Database.getInstance().getEntities().add(toEdit);\n\n        ImportExportCustom.getInstance().exportEntities(path, entities);\n    }\n\n    @Override\n    public void addnested(String path, Entity toAdd, String parentId, String key) throws IdentifierException {\n        if (OrderProvider.getInstance().isAvailableID(parentId)){\n            throw new IdentifierException(\"An entity with id: \" + parentId + \" doesnt exists\");\n        }\n        List <Entity> entities = Database.getInstance().getFiles().get(\n                OrderProvider.getInstance().locateInFile(Crawler.getInstance().findById(parentId))\n        );\n        Entity et = Crawler.getInstance().findById(parentId);\n        Database.getInstance().getEntities().remove(et);\n        entities.remove(et);\n        et.getNestedEntities().put(key,toAdd);\n        entities.add(et);\n        Database.getInstance().getEntities().add(et);\n\n        ImportExportCustom.getInstance().exportEntities(path, entities);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataRepositoryCustomImplementation/src/main/java/service/StorageCustom.java	(revision 5a6753fb1a98d9cb521c85f47b345ed2774217c2)
+++ DataRepositoryCustomImplementation/src/main/java/service/StorageCustom.java	(date 1605106771278)
@@ -58,6 +58,8 @@
             throw new IdentifierException("The entity for deletion doesn't exist");
         database.getFiles().get(fileNo).remove(entity);
         IImportExport importExport = ImportExportCustom.getInstance();
+       // System.out.println(filePath +"  fp");
+        System.out.println(path +"  path");
         importExport.exportEntities(path, database.getFiles().get(fileNo));
         database.getEntities().remove(entity);
     }
